generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Country {
  id        Int    @id @default(autoincrement())
  name      String @unique
  code      String @unique
  continent String
  User      User[]

  @@map("countries")
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]

  @@map("genders")
}

model User {
  id                   Int       @id @default(autoincrement())
  google_id            String?   @unique
  facebook_id          String?   @unique
  github_id            String?   @unique
  apple_id             String?   @unique
  microsoft_id         String?   @unique
  fullname             String?
  username             String    @unique
  bio                  String?
  email                String?   @unique
  phone                String?
  email_verified_at    DateTime?
  phone_verified_at    DateTime?
  identity_verified_at DateTime?
  avatar               String?
  password             String?
  birthdate            DateTime?
  role_id              Int       @default(5)
  national_id          String?   @unique
  enable_2fa           Boolean?  @default(false)
  country_id           Int?
  gender_id            Int?
  country              Country?  @relation(fields: [country_id], references: [id])
  gender               Gender?   @relation(fields: [gender_id], references: [id])
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  @@map("users")
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  email      String
  token      String   @unique
  used       Boolean  @default(false)
  created_at DateTime @default(now())

  @@map("password_resets")
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String
  picture String
  color   String
  Product Product[]

  @@map("brands")
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String
  picture           String
  productCategories ProductCategories[] @relation("ProductCategories")

  @@map("categories")
}

model Store {
  id                   Int       @id @default(autoincrement())
  name                 String
  summary              String
  company_id           String
  seller_social_reason String
  picture              String
  Product              Product[]

  @@map("stores")
}

model ProductCategories {
  id          Int      @id @default(autoincrement())
  product_id  Int
  category_id Int
  product     Product  @relation(fields: [product_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id], name: "ProductCategories")

  @@unique([product_id, category_id])
  @@map("product_categories")
}

model Product {
  id               Int                 @id @default(autoincrement())
  title            String
  summary          String
  condition        String
  brand_id         Int
  brand            Brand               @relation(fields: [brand_id], references: [id])
  store_id         Int
  store            Store               @relation(fields: [store_id], references: [id])
  price            Decimal             @db.Decimal(10, 2)
  last_price       Decimal             @db.Decimal(10, 2)
  details          ProductDetails?
  flags            ProductFlags?
  categories       ProductCategories[]
  variations       ProductVariations[]
  parcelable       Boolean             @default(true)
  max_installments Int?                @default(12)
  created_at       DateTime            @default(now())
  updated_at       DateTime            @default(now())

  @@map("products")
}

model ProductDetails {
  id         Int     @id @default(autoincrement())
  data       Json
  product_id Int     @unique
  product    Product @relation(fields: [product_id], references: [id])

  @@map("product_details")
}

model ProductFlags {
  id         Int     @id @default(autoincrement())
  data       Json
  product_id Int     @unique
  product    Product @relation(fields: [product_id], references: [id])

  @@map("product_flags")
}

model ProductVariations {
  id         Int              @id @default(autoincrement())
  increment  Decimal?         @default(0) @db.Decimal(10, 2)
  decrement  Decimal?         @default(0) @db.Decimal(10, 2)
  sizes      VariationSizes[]
  color      String
  images     Json
  product_id Int
  product    Product          @relation(fields: [product_id], references: [id])

  @@map("product_variations")
}

model VariationSizes {
  id           Int               @id @default(autoincrement())
  name         String
  qtd          Int               @default(10)
  variation    ProductVariations @relation(fields: [variation_id], references: [id])
  variation_id Int

  @@map("variation_sizes")
}
